# -*- coding: utf-8 -*-
import asyncio
import functools
import sys
import qasync
from PyQt5.QtCore import QRect
from PyQt5.QtGui import QPainter
# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import (
    QWidget,
    QLabel,
    QLineEdit,
    QTextEdit,
    QPushButton,
    QVBoxLayout,
    QGridLayout,
)

from PyQt5 import QtCore, QtGui, QtWidgets
from qasync import asyncSlot, asyncClose, QApplication
import utility
from intel import Intel

class MyPopup(QWidget):
    def __init__(self, resultList):
        QWidget.__init__(self)
        self.setLayout(QGridLayout())
        self.label = QLabel("Test Result:", self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label.setFont(font)
        self.label.setWordWrap(True)
        self.layout().addWidget(self.label,0,1,1,1)

        self.idleHeader = QLabel("Idle:", self)
        self.idleHeader.setSizePolicy(sizePolicy)
        self.idleHeader.setFont(font)
        self.idleHeader.setWordWrap(True)
        self.layout().addWidget(self.idleHeader, 0, 2, 1, 1)

        self.runningHeader = QLabel("Running:", self)
        self.runningHeader.setSizePolicy(sizePolicy)
        self.runningHeader.setFont(font)
        self.runningHeader.setWordWrap(True)
        self.layout().addWidget(self.runningHeader, 0, 3, 1, 1)

        self.diffHeader = QLabel("Difference:", self)
        self.diffHeader.setSizePolicy(sizePolicy)
        self.diffHeader.setFont(font)
        self.diffHeader.setWordWrap(True)
        self.layout().addWidget(self.diffHeader, 0, 4, 1, 1)

        self.listofHeader = QLabel(resultList[0], self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.listofHeader.sizePolicy().hasHeightForWidth())
        self.listofHeader.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.listofHeader.setFont(font)
        self.listofHeader.setWordWrap(True)
        self.layout().addWidget(self.listofHeader,1,1,1,1)

        self.resultIdle = QLabel(resultList[1], self)
        self.resultIdle.setSizePolicy(sizePolicy)
        self.resultIdle.setFont(font)
        self.resultIdle.setWordWrap(True)
        self.layout().addWidget(self.resultIdle, 1, 2, 1, 1)

        self.resultRunning = QLabel(resultList[2], self)
        self.resultRunning.setSizePolicy(sizePolicy)
        self.resultRunning.setFont(font)
        self.resultRunning.setWordWrap(True)
        self.layout().addWidget(self.resultRunning, 1, 3, 1, 1)

        self.resultRunning = QLabel(resultList[3], self)
        self.resultRunning.setSizePolicy(sizePolicy)
        self.resultRunning.setFont(font)
        self.resultRunning.setWordWrap(True)
        self.layout().addWidget(self.resultRunning, 1, 4, 1, 1)
class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setLayout(QGridLayout())
        self.resize(600,200)
        self.label_4 = QLabel("Current Status:",self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setWordWrap(True)
        self.layout().addWidget(self.label_4, 0, 2, 1, 1)

        self.startupSec = QLineEdit("20",self)
        self.startupSec.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.startupSec.sizePolicy().hasHeightForWidth())
        self.startupSec.setSizePolicy(sizePolicy)
        self.layout().addWidget(self.startupSec, 7, 2, 1, 1)

        self.reloadButton = QPushButton("Find Dependencies",self)
        self.reloadButton.clicked.connect(self.reloadButton_clicked)
        self.layout().addWidget(self.reloadButton, 10, 3, 1, 1)

        self.intelDIR = QLineEdit("",self)
        self.layout().addWidget(self.intelDIR, 3, 2, 1, 2)

        self.label = QLabel("Intel Power Gadget DIR:",self)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setScaledContents(True)
        self.label.setWordWrap(True)
        self.layout().addWidget(self.label, 3, 1, 1, 1)

        self.appDIR = QLineEdit("",self)
        self.layout().addWidget(self.appDIR, 4, 2, 1, 2)

        self.label_2 = QLabel("Application DIR:",self)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setWordWrap(True)
        self.layout().addWidget(self.label_2, 4, 1, 1, 1)

        self.Status = QtWidgets.QLabel("Idle",self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Status.sizePolicy().hasHeightForWidth())
        self.Status.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Status.setFont(font)
        self.Status.setScaledContents(False)
        self.Status.setWordWrap(True)
        self.layout().addWidget(self.Status, 0, 3, 1, 1)

        self.startUpCheckBox = QtWidgets.QCheckBox("Startup Wait For",self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.startUpCheckBox.sizePolicy().hasHeightForWidth())
        self.startUpCheckBox.setSizePolicy(sizePolicy)
        self.startUpCheckBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.startUpCheckBox.setChecked(False)
        self.startUpCheckBox.setObjectName("startUpCheckBox")
        self.layout().addWidget(self.startUpCheckBox, 7, 1, 1, 1)
        self.startUpCheckBox.stateChanged.connect(self.startUpCheckBox_clicked)

        self.runButton = QtWidgets.QPushButton("Run",self)
        self.layout().addWidget(self.runButton, 10, 1, 1, 1)
        self.runButton.clicked.connect(self.runButton_clicked)

        self.label_3 = QLabel("s",self)
        self.layout().addWidget(self.label_3, 7, 3, 1, 1)

        self.settingsHeader = QLabel("Optional Settings",self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.settingsHeader.sizePolicy().hasHeightForWidth())
        self.settingsHeader.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.settingsHeader.setFont(font)
        self.layout().addWidget(self.settingsHeader, 5, 1, 1, 3)

        self.measureTimeText = QLabel("Measure Time per Test:",self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.measureTimeText.sizePolicy().hasHeightForWidth())
        self.measureTimeText.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.measureTimeText.setFont(font)
        self.layout().addWidget(self.measureTimeText, 6, 1, 1, 1)

        self.measureTime = QLineEdit("60",self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.measureTime.sizePolicy().hasHeightForWidth())
        self.measureTime.setSizePolicy(sizePolicy)
        self.layout().addWidget(self.measureTime, 6, 2, 1, 1)

        self.measureTimeUnit = QtWidgets.QLabel("s",self)
        self.layout().addWidget(self.measureTimeUnit, 6, 3, 1, 1)

        self.initUi()

        # setting variables
        self.startUpCheck = False
        self.intel = Intel("", "", self.Status)

    def initUi(self):
        self.findIntelDIR()

    def findIntelDIR(self):
        intelDIRText = ""
        try:
            temp = utility.LocateIPG()
            intelDIRText = temp
        except:
            pass
        self.intelDIR.setText(intelDIRText)

    def newPopUp(self,message):
        self.popUpWindows = MyPopup(message)
        self.popUpWindows.show()

    @asyncSlot()
    async def test(self):

        # Preparation before testing
        self.intel.setIntelDIR(self.intelDIR.text())
        self.intel.setAppDIR(self.appDIR.text())
        if not self.intel.pathValid():
            return

        startUpWaitTime = 0
        if self.startUpCheck:
            try:
                startUpWaitTime = int(self.startupSec.text())
            except:
                startUpWaitTime = 0

        try:
            monitorTime = int(self.measureTime.text())
        except:
            monitorTime = 60

        self.Status.setText("Start Testing...")
        success = await self.intel.startTest(monitorTime = monitorTime, startUpWait = startUpWaitTime)

        if success:

            self.intel.printData(self.newPopUp)
            self.Status.setText("Idle")

    # Connected functions
    @asyncSlot()
    async def runButton_clicked(self):
        # Disable to avoid second call
        self.runButton.setEnabled(False)
        await self.test()
        self.runButton.setEnabled(True)
    def startUpCheckBox_clicked(self):
        self.startUpCheck ^= True
        if(self.startUpCheck):
            self.startupSec.setEnabled(True)
        else:
            self.startupSec.setEnabled(False)

    def reloadButton_clicked(self):
        self.findIntelDIR()



async def main():
    def close_future(future, loop):
        loop.call_later(10, future.cancel)
        future.cancel()

    loop = asyncio.get_event_loop()
    future = asyncio.Future()

    app = QApplication.instance()
    if hasattr(app, "aboutToQuit"):
        getattr(app, "aboutToQuit").connect(
            functools.partial(close_future, future, loop)
        )
    mainWindow = MainWindow()
    mainWindow.show()

    await future
    return True


if __name__ == "__main__":
    try:
        qasync.run(main())
    except asyncio.exceptions.CancelledError:
        sys.exit(0)